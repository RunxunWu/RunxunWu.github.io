<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>区块链概念证明</title>
      <link href="/2020/07/05/qu-kuai-lian-gai-nian-zheng-ming/"/>
      <url>/2020/07/05/qu-kuai-lian-gai-nian-zheng-ming/</url>
      
        <content type="html"><![CDATA[<p>区块链，顾名思义是一个个的区块组成的链条。每一个区块存储了三个数据，分别是账本数据、前一个区块的哈希值和自己的哈希值，哈希值相当于区块的指纹。而自己的哈希值由哈希函数对账本数据和前一个区块的哈希值进行计算得出。由此也可以看出，如果想要篡改账本数据，也会对该区块的哈希值作修改，前一个区块的哈希值修改后又会影响下一个区块的哈希值。所以要想更改一个区块的数据需要对该区块之后的一整条区块链进行修改。这使得想要修改数据成为了一件成本巨大，几乎不可能做到的事情。<br>下面使用python语言进行编程实现，对以上概念做实例证明：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#区块链概念证明</span><span class="token keyword">import</span> hashlib          <span class="token comment" spellcheck="true">#引入哈希模块</span><span class="token keyword">def</span> <span class="token function">sha256</span><span class="token punctuation">(</span>dataNeedSha<span class="token punctuation">)</span><span class="token punctuation">:</span>    sha256 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token punctuation">)</span>    sha256<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dataNeedSha<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sha256<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 区块</span><span class="token comment" spellcheck="true">#储存data</span><span class="token comment" spellcheck="true">#之前区块的哈希值</span><span class="token comment" spellcheck="true">#自己的哈希值: 由存储在区块里的信息计算出来的（data+之前区块的哈希值）</span><span class="token keyword">class</span> <span class="token class-name">Block</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> previousHash<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>previousHash <span class="token operator">=</span> previousHash        self<span class="token punctuation">.</span>hash <span class="token operator">=</span> self<span class="token punctuation">.</span>ComputeHash    @property    <span class="token keyword">def</span> <span class="token function">ComputeHash</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>sha256<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token operator">+</span>self<span class="token punctuation">.</span>previousHash<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">showBlock</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'data'</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token string">'previousHash'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>previousHash<span class="token punctuation">,</span> <span class="token string">'hash'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>hash<span class="token punctuation">}</span><span class="token punctuation">)</span>block <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token string">'转账十元'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span>block<span class="token punctuation">.</span>showBlock<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>如上图所示，定义了区块Block类用来储存三个数据，调用常用的sha256（secret hash algorithm）函数对账本数据和前区块的哈希值进行计算，定义了showBlock方法对区块内容进行输出。输出结果如下图：<br>    {‘data’: ‘转账十元’, ‘previousHash’: ‘123’, ‘hash’: ‘bbb52b503ca642e6c48f02ab793b2beaca4a5c5ce7e93531038ed65799f70010’}</p><p>接下来是创建区块的链，定义链Chain类，并且要先定义一个祖先区块：<br>如下图</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#区块的 链</span><span class="token comment" spellcheck="true">#生成祖先区块</span><span class="token keyword">class</span> <span class="token class-name">Chain</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>chain <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>ancestorBlock<span class="token punctuation">]</span>    @property    <span class="token keyword">def</span> <span class="token function">ancestorBlock</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        ancestor_block <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token string">'祖先区块'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ancestor_block    <span class="token keyword">def</span> <span class="token function">showChain</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>chain<span class="token punctuation">:</span>            i<span class="token punctuation">.</span>showBlock<span class="token punctuation">(</span><span class="token punctuation">)</span>chain <span class="token operator">=</span> Chain<span class="token punctuation">(</span><span class="token punctuation">)</span>chain<span class="token punctuation">.</span>showChain<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出结果如下：<br>    {‘data’: ‘祖先区块’, ‘previousHash’: ‘’, ‘hash’: ‘4fed52ab5fe830c2e29def3b0de30430b43feb9583e6b9446e6cb1782e363615’}</p><p>更进一步，定义添加区块的函数：</p><pre class=" language-python"><code class="language-python">    @property    <span class="token keyword">def</span> <span class="token function">getLatestBlock</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>chain<span class="token punctuation">[</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chain<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#添加区块到区块链上</span>    <span class="token comment" spellcheck="true">#要找到最近一个block的hash              </span>    <span class="token comment" spellcheck="true">#这个hash就是新区块的previousHash</span>    <span class="token keyword">def</span> <span class="token function">addBlockToChain</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> newBlock<span class="token punctuation">)</span><span class="token punctuation">:</span>                            newBlock<span class="token punctuation">.</span>previousHash <span class="token operator">=</span> self<span class="token punctuation">.</span>getLatestBlock<span class="token punctuation">.</span>hash        newBlock<span class="token punctuation">.</span>hash <span class="token operator">=</span> newBlock<span class="token punctuation">.</span>ComputeHash        self<span class="token punctuation">.</span>chain<span class="token punctuation">.</span>append<span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span>chain <span class="token operator">=</span> Chain<span class="token punctuation">(</span><span class="token punctuation">)</span>block1 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token string">'转账十元'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>chain<span class="token punctuation">.</span>addBlockToChain<span class="token punctuation">(</span>block1<span class="token punctuation">)</span>chain<span class="token punctuation">.</span>showChain<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出结果：<br>    {‘data’: ‘祖先区块’, ‘previousHash’: ‘’, ‘hash’: ‘4fed52ab5fe830c2e29def3b0de30430b43feb9583e6b9446e6cb1782e363615’}<br>    {‘data’: ‘转账十元’, ‘previousHash’: ‘4fed52ab5fe830c2e29def3b0de30430b43feb9583e6b9446e6cb1782e363615’, ‘hash’: ‘c3fb4512257f093caf4d78b610cbba0b330cc883105fbd9509bbaa6086bf5a46’}</p><p>然后我们就可以无限地添加区块了，但是还要有一个函数用来验证当前的区块链是否合法，我们通过验证区块的previousHash是否等于previous区块的hash来判断（顺便判断一下数据有没有被篡改）：</p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true">#验证当前的这个区块链是否合法</span>    <span class="token comment" spellcheck="true">#当前的数据有没有被篡改</span>    <span class="token comment" spellcheck="true">#我们要验证区块的previousHash是否等于previous区块的hash</span>    <span class="token keyword">def</span> <span class="token function">validateChain</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chain<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>chain<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hash <span class="token operator">!=</span> self<span class="token punctuation">.</span>chain<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ComputeHash<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            blockToValidate <span class="token operator">=</span> self<span class="token punctuation">.</span>chain<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>blockToValidate<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">!=</span> blockToValidate<span class="token punctuation">.</span>ComputeHash<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据被篡改'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            previousBlock <span class="token operator">=</span> self<span class="token punctuation">.</span>chain<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> blockToValidate<span class="token punctuation">.</span>previousHash <span class="token operator">!=</span> previousBlock<span class="token punctuation">.</span>hash<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'前后区块链接断裂'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><p>如下图，验证函数功能：</p><pre class=" language-python"><code class="language-python">chain <span class="token operator">=</span> Chain<span class="token punctuation">(</span><span class="token punctuation">)</span>block1 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token string">'转账十元'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>block2 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token string">'转账二十元'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>chain<span class="token punctuation">.</span>addBlockToChain<span class="token punctuation">(</span>block1<span class="token punctuation">)</span>chain<span class="token punctuation">.</span>addBlockToChain<span class="token punctuation">(</span>block2<span class="token punctuation">)</span>chain<span class="token punctuation">.</span>showChain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span>validateChain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出结果：<br>    {‘data’: ‘祖先区块’, ‘previousHash’: ‘’, ‘hash’: ‘4fed52ab5fe830c2e29def3b0de30430b43feb9583e6b9446e6cb1782e363615’}<br>    {‘data’: ‘转账十元’, ‘previousHash’: ‘4fed52ab5fe830c2e29def3b0de30430b43feb9583e6b9446e6cb1782e363615’, ‘hash’: ‘c3fb4512257f093caf4d78b610cbba0b330cc883105fbd9509bbaa6086bf5a46’}<br>    {‘data’: ‘转账二十元’, ‘previousHash’: ‘c3fb4512257f093caf4d78b610cbba0b330cc883105fbd9509bbaa6086bf5a46’, ‘hash’: ‘355aa11242a742f32cf91b8b3cc9d8aa8f909b0da689ac4dfb95ccd5bd695383’}<br>    True</p><p>接下来尝试篡改区块链：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 尝试篡改区块</span>chain<span class="token punctuation">.</span>chain<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">'转账500'</span> chain<span class="token punctuation">.</span>showChain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span>validateChain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出结果：<br>    {‘data’: ‘祖先区块’, ‘previousHash’: ‘’, ‘hash’: ‘4fed52ab5fe830c2e29def3b0de30430b43feb9583e6b9446e6cb1782e363615’}<br>    {‘data’: ‘转账500’, ‘previousHash’: ‘4fed52ab5fe830c2e29def3b0de30430b43feb9583e6b9446e6cb1782e363615’, ‘hash’: ‘c3fb4512257f093caf4d78b610cbba0b330cc883105fbd9509bbaa6086bf5a46’}<br>    {‘data’: ‘转账二十元’, ‘previousHash’: ‘c3fb4512257f093caf4d78b610cbba0b330cc883105fbd9509bbaa6086bf5a46’, ‘hash’: ‘355aa11242a742f32cf91b8b3cc9d8aa8f909b0da689ac4dfb95ccd5bd695383’}<br>    数据被篡改<br>    False</p><p>如果修正了哈希值呢？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 尝试修正hash</span>chain<span class="token punctuation">.</span>chain<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> chain<span class="token punctuation">.</span>chain<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ComputeHash</code></pre><p>输出结果：<br>    {‘data’: ‘祖先区块’, ‘previousHash’: ‘’, ‘hash’: ‘4fed52ab5fe830c2e29def3b0de30430b43feb9583e6b9446e6cb1782e363615’}<br>    {‘data’: ‘转账500’, ‘previousHash’: ‘4fed52ab5fe830c2e29def3b0de30430b43feb9583e6b9446e6cb1782e363615’, ‘hash’: ‘5a37b0e17c9f44a7f3676cdf137e1ae80d62d4bbc12505e62a8c2cde64a30644’}<br>    {‘data’: ‘转账二十元’, ‘previousHash’: ‘c3fb4512257f093caf4d78b610cbba0b330cc883105fbd9509bbaa6086bf5a46’, ‘hash’: ‘355aa11242a742f32cf91b8b3cc9d8aa8f909b0da689ac4dfb95ccd5bd695383’}<br>    前后区块链接断裂<br>    False</p><p>综上所述，区块链确实拥有几乎不可篡改的特性。<br>以上就是一个最简易的python实现的“概念证明”的区块链程序。该程序当然还有许多的缺陷，如未加入工作量证明等区块链的机制，随着我对区块链技术了解的深入，我会进行迭代的更新，尽量去完善自己的这样一条区块链。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言迷宫小游戏</title>
      <link href="/2020/05/28/c-yu-yan-mi-gong-xiao-you-xi/"/>
      <url>/2020/05/28/c-yu-yan-mi-gong-xiao-you-xi/</url>
      
        <content type="html"><![CDATA[<p>C语言迷宫小游戏</p><p>该文档示例一个完整的C语言小游戏“走迷宫”（编译器里运行即可）</p><p>你将可以通过键盘上的“W”，“S”，“A”，“D”4个按键来控制1个小球向上，下，左，右4个方向移动，目的是让小球从起点走到终点走出迷宫。完整代码如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                             <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//用大写字母O表示小球，用二维字符数组来存储这个迷宫（#表示墙壁，可以自己定制）。</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"##############################"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//画迷宫</span>                    <span class="token string">"#O         #   ##   # ### ####"</span><span class="token punctuation">,</span>                         <span class="token string">"# ###### # # #    # # ### ####"</span><span class="token punctuation">,</span>                    <span class="token string">"# #   ## #   # #### # ###   ##"</span><span class="token punctuation">,</span>                    <span class="token string">"#   # ##  ###    #  #  ## ####"</span><span class="token punctuation">,</span>                    <span class="token string">"##### #     # ##### ##    ####"</span><span class="token punctuation">,</span>                    <span class="token string">"#   # ##### #   #   # # #    #"</span><span class="token punctuation">,</span>                    <span class="token string">"# # #    ## # #### ## # # ####"</span><span class="token punctuation">,</span>                    <span class="token string">"# # # ##      ##      # # ####"</span><span class="token punctuation">,</span>                    <span class="token string">"# # # ####### ## ###### #   ##"</span><span class="token punctuation">,</span>                    <span class="token string">"# #   ##   # ## ###### ###   #"</span><span class="token punctuation">,</span>                    <span class="token string">"# ###### # #####  #        # #"</span><span class="token punctuation">,</span>                    <span class="token string">"#        # #     ##### ### #  "</span><span class="token punctuation">,</span>                    <span class="token string">"# ######## ##### # ### ### # #"</span><span class="token punctuation">,</span>                    <span class="token string">"#     # ## ##### ###       ###"</span><span class="token punctuation">,</span>                    <span class="token string">"##### # ## #      ######## # #"</span><span class="token punctuation">,</span>                    <span class="token string">"#     # ## ## ###        #   #"</span><span class="token punctuation">,</span>                    <span class="token string">"# # ###       ###### ####### #"</span><span class="token punctuation">,</span>                    <span class="token string">"# #    ### ##      #         #"</span><span class="token punctuation">,</span>                    <span class="token string">"##############################"</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//设置变量 </span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>                                                     x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> p<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span> q<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//赋值，设置起点和终点 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//for循环从第1行到20行</span>    <span class="token function">puts</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//输出迷宫在屏幕上 </span>    <span class="token comment" spellcheck="true">//while循环检测是否到达终点（x,y坐标不在终点（p，q）时即未达到终点）        </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>p <span class="token operator">||</span> y<span class="token operator">!=</span>q<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                           <span class="token comment" spellcheck="true">//以下是利用坐标对上下左右能否移动的判断 </span>        ch<span class="token operator">=</span><span class="token function">getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//读入键盘输入的一个字符</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'s'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>                x<span class="token operator">++</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'O'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'w'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>                x<span class="token operator">--</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'O'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>                y<span class="token operator">--</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'O'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'d'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>                y<span class="token operator">++</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'O'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//system("cls")是清屏语句，这里是用先清屏后重新输出屏幕的方式使小球移动</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//游戏胜利 </span>    <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Sleep()是等待语句，括号内为毫秒，Sleep(2000)即等待2秒                                    </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
